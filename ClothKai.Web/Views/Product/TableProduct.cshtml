@model ClothKai.Web.ViewModels.ProductsSearchViewModel
@{
    ViewBag.Title = "TableProduct";
}

<h2 class="mb-2">List of Products</h2>
<div class="mb-2">
    <form method="post">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <input name="s" id="s" placeholder="Search..." class="form-control" value="@Model.SearchTerm" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-4">
                            <button type="button" id="btnSearch" class="col-12">Search</button>
                        </div>
                        <div class="col-md-4">
                            <button type="button" id="btnReset" class="col-12">Reset</button>
                        </div>
                        <div class="col-md-4">
                            <button type="button" id="btnNew" class="col-12">New</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>
<table id="ProductTable" class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Category</th>
            <th>Price</th>
            <th style="width:40%;">Action</th>
        </tr>
    </thead>
    <tbody>
        @if (Model.Products != null && Model.Products.Count > 0)
        {
            foreach (var item in Model.Products)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>
                        @if (item.Category != null)
                        {
                            <text>@item.Category.Name</text>
                        }
                        else
                        {
                            <text>-</text>
                        }
                    </td>
                    <td>@item.Price</td>
                    <td>
                        <button type="button" class="btnEdit" data-id="@item.ID">Edit</button>
                        <button type="button" class="btnDelete" data-id="@item.ID">Delete</button>
                        <button type="button" class="addToCart" data-id="@item.ID">Add to Cart</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="4" style="color:red">No data</td>
            </tr>
        }
    </tbody>
</table>
<div>
    @if (Model.Pager != null)
    {
        if (Model.Pager.CurrentPage > 1)
        {
            <button class="pagesButton" data-pageNo="1"><<</button>
            <button class="pagesButton" data-pageNo="@(Model.Pager.CurrentPage - 1)"><</button>
        }
        for (var page = Model.Pager.StartPage; page <= Model.Pager.EndPage; page++)
        {
            var actived = Model.Pager.CurrentPage == page ? "active bg-info" : string.Empty;
            <button class="@actived pagesButton" data-pageNo="@page">@page</button>
        }
        if (Model.Pager.CurrentPage < Model.Pager.TotalPages)
        {
            <button class="pagesButton" data-pageNo="@(Model.Pager.CurrentPage + 1)">></button>
            <button class="pagesButton" data-pageNo="@Model.Pager.EndPage">>></button>
        }
    }
</div>
<script type="text/javascript">
    $(".pagesButton").click(function () {
        var s = $('#s').val();
        $.ajax({
            url: "/Product/TableProduct",
            data: {
                s: s,
                pageNo: $(this).attr("data-pageNo")
            }
        })
            .done(function (response) {
                $('#tableContainer').html(response);
            })
            .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                alert("Error");
            });
    });

    $('#btnSearch').click(function () {
        var s = $('#s').val();
        $.ajax({
            url: "/Product/TableProduct",
            data: {
                s: s
            }
        })
            .done(function (response) {
                $('#tableContainer').html(response);
            })
            .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                alert("Error");
            });
    });

    $('#btnReset').click(function () {
        var s = "";
        $.ajax({
            url: "/Product/TableProduct",
            data: {
                s: s
            }
        })
            .done(function (response) {
                $('#tableContainer').html(response);
            })
            .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                alert("Error");
            });
    });

    $('#btnNew').click(function () {
        $.ajax({
            type: "GET",
            url: "/Product/Create"
        })
            .done(function (response) {
                $('#actionContainer').html(response);
                focusAction("actionContainer");
            })
            .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                alert("Error");
            });
    });
    $(".btnEdit").click(function () {
        $.ajax({
            type: "GET",
            url: "/Product/Edit",
            data: {
                ID: $(this).attr("data-id")
            }
        })
            .done(function (response) {
                $('#actionContainer').html(response);
                focusAction("actionContainer");
            })
            .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                alert("Error");
            });
    });
    $(".btnDelete").click(function () {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                Swal.fire(
                    'Deleted!',
                    'Your file has been deleted.',
                    'success'
                )
                $.ajax({
                    type: "POST",
                    url: "/Product/Delete",
                    data: {
                        ID: $(this).attr("data-id")
                    }
                })
                    .done(function (response) {
                        $('#tableContainer').html(response);
                    })
                    .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                        alert("Error");
                    });
            }
        })
    });
    var products = [];
    $(".addToCart").click(function () {
        var productID = $(this).attr("data-id");
        products.push(productID);
        $.cookie('CartProducts', products.join('-'), { expires: 10, path: '/' });
        const Toast = Swal.mixin({
            toast: true,
            position: 'bottom-end',
            showConfirmButton: false,
            timer: 1000,
            timerProgressBar: true,
            didOpen: (toast) => {
                toast.addEventListener('mouseenter', Swal.stopTimer)
                toast.addEventListener('mouseleave', Swal.resumeTimer)
            }
        })

        Toast.fire({
            icon: 'success',
            title: 'Add in successfully'
        })
    });
</script>



